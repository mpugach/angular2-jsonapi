{"version":3,"file":"angular2-jsonapi.js","sources":["ng://angular2-jsonapi/models/json-nested.model.ts","ng://angular2-jsonapi/converters/json-model/json-model.converter.ts","ng://angular2-jsonapi/decorators/has-many.decorator.ts","ng://angular2-jsonapi/decorators/belongs-to.decorator.ts","ng://angular2-jsonapi/constants/symbols.ts","ng://angular2-jsonapi/converters/date/date.converter.ts","ng://angular2-jsonapi/decorators/attribute.decorator.ts","ng://angular2-jsonapi/decorators/nested-attribute.decorator.ts","ng://angular2-jsonapi/decorators/json-attribute.decorator.ts","ng://angular2-jsonapi/models/json-api-meta.model.ts","ng://angular2-jsonapi/decorators/json-api-model-config.decorator.ts","ng://angular2-jsonapi/decorators/json-api-datastore-config.decorator.ts","ng://angular2-jsonapi/models/json-api.model.ts","ng://angular2-jsonapi/models/error-response.model.ts","ng://angular2-jsonapi/models/json-api-query-data.ts","ng://angular2-jsonapi/interfaces/overrides.interface.ts","ng://angular2-jsonapi/interfaces/json-model-converter-config.interface.ts","ng://angular2-jsonapi/interfaces/datastore-config.interface.ts","ng://angular2-jsonapi/interfaces/model-config.interface.ts","ng://angular2-jsonapi/interfaces/attribute-decorator-options.interface.ts","ng://angular2-jsonapi/interfaces/property-converter.interface.ts","ng://angular2-jsonapi/services/json-api-datastore.service.ts","ng://angular2-jsonapi/providers.ts","ng://angular2-jsonapi/module.ts"],"sourcesContent":["import { ModelConfig } from '../interfaces/model-config.interface';\nimport { JsonApiModel } from './json-api.model';\n\nexport class JsonApiNestedModel {\n  [key: string]: any;\n\n  public nestedDataSerialization = false;\n\n  constructor(data?: any) {\n    if (data) {\n      Object.assign(this, data);\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  public fill(data: any) {\n    Object.assign(this, data);\n  }\n\n  public serialize(): any {\n    return this.transformSerializedNamesToPropertyNames();\n  }\n\n  protected transformSerializedNamesToPropertyNames<T extends JsonApiModel>() {\n    const serializedNameToPropertyName = this.getModelPropertyNames();\n    const properties: any = {};\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (this && this[serializedName] !== null &&\n        this[serializedName] !== undefined && serializedName !== 'nestedDataSerialization') {\n        properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected getModelPropertyNames() {\n    return Reflect.getMetadata('AttributeMapping', this) || [];\n  }\n}\n","import { JsonModelConverterConfig } from '../../interfaces/json-model-converter-config.interface';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\nimport { JsonApiNestedModel } from '../../models/json-nested.model';\n\nexport const DEFAULT_OPTIONS: JsonModelConverterConfig = {\n  nullValue: false,\n  hasMany: false\n};\n\nexport class JsonModelConverter<T> implements PropertyConverter {\n  private modelType: any; // ModelType<T>\n  private options: JsonModelConverterConfig;\n\n  constructor(model: T, options: JsonModelConverterConfig = {}) {\n    this.modelType = model; // <ModelType<T>>model\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  mask(value: any): T | Array<T> {\n    if (!value && !this.options.nullValue) {\n      if (this.options.hasMany) {\n        return [];\n      }\n      return new this.modelType();\n    }\n\n    let result = null;\n    if (this.options.hasMany) {\n      if (!Array.isArray(value)) {\n        throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\n      }\n      result = [];\n      for (const item of value) {\n        if (item === null) {\n          continue;\n        }\n        let temp;\n        if (typeof item === 'object') {\n          temp = new this.modelType();\n          temp.fill(item);\n        } else {\n          temp = item;\n        }\n\n        result.push(temp);\n      }\n    } else {\n      if (!(value instanceof this.modelType)) {\n        result = new this.modelType();\n        result.fill(value);\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n\n  unmask(value: any): any {\n    if (!value) {\n      return value;\n    }\n    let result = null;\n    if (Array.isArray(value)) {\n      result = [];\n      for (const item of value) {\n        if (!item) {\n          continue;\n        }\n        if (item instanceof JsonApiNestedModel) {\n          item.nestedDataSerialization = true;\n          result.push(item.serialize());\n          item.nestedDataSerialization = false;\n        } else {\n          result.push(item);\n        }\n      }\n    } else {\n      if (value instanceof JsonApiNestedModel) {\n        value.nestedDataSerialization = true;\n        result = value.serialize();\n        value.nestedDataSerialization = false;\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n}\n","export function HasMany(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('HasMany', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('HasMany', annotations, target);\n  };\n}\n","export function BelongsTo(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('BelongsTo', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('BelongsTo', annotations, target);\n  };\n}\n","// tslint:disable-next-line:variable-name\nexport const AttributeMetadata = Symbol('AttributeMetadata') as any;\n","import { parseISO } from 'date-fns';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\n\nexport class DateConverter implements PropertyConverter {\n  mask(value: any) {\n    if (typeof value === 'string') {\n      return parseISO(value);\n    } else {\n      return value;\n    }\n  }\n\n  unmask(value: any) {\n    return value.toISOString();\n  }\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\nimport * as _ from 'lodash';\n\nexport function Attribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('Attribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('Attribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const setMetadata = (\n      instance: any,\n      oldValue: any,\n      newValue: any\n    ) => {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      instance[AttributeMetadata][propertyName] = {\n        newValue,\n        oldValue,\n        nested: false,\n        serializedName: options.serializedName,\n        hasDirtyAttributes: !_.isEqual(oldValue, newValue),\n        serialisationValue: converter(targetType, newValue, true)\n      };\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      const convertedValue = converter(targetType, newVal);\n      let oldValue = null;\n      if (this.isModelInitialization() && this.id) {\n        oldValue = converter(targetType, newVal);\n      } else {\n        if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\n          oldValue = this[AttributeMetadata][propertyName].oldValue;\n        }\n      }\n\n      this[`_${propertyName}`] = convertedValue;\n      setMetadata(this, oldValue, convertedValue);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport * as _ from 'lodash';\n\nexport function NestedAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('NestedAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const updateMetadata = (instance: any) => {\n      const newValue = instance[`_${propertyName}`];\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\n        instance[AttributeMetadata][propertyName].newValue = newValue;\n        instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n          instance[AttributeMetadata][propertyName].oldValue,\n          newValue\n        );\n        instance[AttributeMetadata][propertyName].serialisationValue = newValue;\n      } else {\n        const oldValue = _.cloneDeep(newValue);\n        instance[AttributeMetadata][propertyName] = {\n          newValue,\n          oldValue,\n          converter,\n          nested: true,\n          hasDirtyAttributes: !_.isEqual(newValue, oldValue)\n        };\n      }\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n      updateMetadata(this);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n\n    }\n  };\n}\n","import { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\n\nexport function JsonAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('JsonAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const getter = function() {\n      if (this.nestedDataSerialization) {\n        return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\n      }\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","export type MetaModelType<T> = new(response: any) => T;\n\nexport class JsonApiMetaModel {\n  public links: Array<any>;\n  public meta: any;\n\n  constructor(response: any) {\n    this.links = response.links || [];\n    this.meta = response.meta;\n  }\n}\n","import { JsonApiMetaModel } from '../models/json-api-meta.model';\nimport { ModelConfig } from '../interfaces/model-config.interface';\n\nexport function JsonApiModelConfig(config: ModelConfig) {\n  return (target: any) => {\n    if (typeof config.meta === 'undefined' || config.meta == null) {\n      config.meta = JsonApiMetaModel;\n    }\n\n    Reflect.defineMetadata('JsonApiModelConfig', config, target);\n  };\n}\n","export function JsonApiDatastoreConfig(config: any = {}) {\n  return (target: any) => {\n    Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\n  };\n}\n","import find from 'lodash-es/find';\nimport includes from 'lodash-es/includes';\nimport { Observable } from 'rxjs';\nimport { JsonApiDatastore, ModelType } from '../services/json-api-datastore.service';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport * as _ from 'lodash';\nimport { AttributeMetadata } from '../constants/symbols';\nimport { HttpHeaders } from '@angular/common/http';\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\nconst parseRelationshipLinks = relationships => {\n  const result = {};\n  const linksMapper = ({ links }, key) => {\n    if (links) {\n      result[key] = { links };\n    }\n  };\n\n  _.forEach(relationships || {}, linksMapper);\n\n  return result;\n};\n\nexport class JsonApiModel {\n  id: string;\n  public modelInitialization = false;\n  public relationshipLinks = {};\n\n  [key: string]: any;\n\n  lastSyncModels: Array<any>;\n\n  constructor(private internalDatastore: JsonApiDatastore, data?: any) {\n    if (data) {\n      this.modelInitialization = true;\n      this.id = data.id;\n      this.relationshipLinks = parseRelationshipLinks(data.relationships);\n      Object.assign(this, data.attributes);\n      this.modelInitialization = false;\n    }\n  }\n\n  public isModelInitialization(): boolean {\n    return this.modelInitialization;\n  }\n\n  public syncRelationships(data: any, included: any, remainingModels?: Array<any>): void {\n    if (this.lastSyncModels === included) {\n      return;\n    }\n\n    if (data) {\n      let modelsForProcessing = remainingModels;\n\n      if (modelsForProcessing === undefined) {\n        modelsForProcessing = [].concat(included);\n      }\n\n      this.parseHasMany(data, included, modelsForProcessing);\n      this.parseBelongsTo(data, included, modelsForProcessing);\n    }\n\n    this.lastSyncModels = included;\n  }\n\n  public save(params?: any, headers?: HttpHeaders, customUrl?: string): Observable<this> {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\n  }\n\n  get hasDirtyAttributes() {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    let hasDirtyAttributes = false;\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.hasDirtyAttributes) {\n          hasDirtyAttributes = true;\n          break;\n        }\n      }\n    }\n    return hasDirtyAttributes;\n  }\n\n  private checkChanges() {\n    const attributesMetadata: any = this[AttributeMetadata];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.nested) {\n          this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n            attributesMetadata[propertyName].oldValue,\n            attributesMetadata[propertyName].newValue\n          );\n          this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(\n            Reflect.getMetadata('design:type', this, propertyName),\n            _.cloneDeep(attributesMetadata[propertyName].newValue),\n            true\n          );\n        }\n      }\n    }\n  }\n\n  public rollbackAttributes(): void {\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        if (attributesMetadata[propertyName].hasDirtyAttributes) {\n          this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\n        }\n      }\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  private parseHasMany(data: any, included: any, remainingModels: Array<any>): void {\n    const hasMany: any = Reflect.getMetadata('HasMany', this);\n\n    if (hasMany) {\n      for (const metadata of hasMany) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n\n        if (relationship && relationship.data && Array.isArray(relationship.data)) {\n          let allModels: JsonApiModel[] = [];\n          const modelTypesFetched: any = [];\n\n          for (const typeIndex of Object.keys(relationship.data)) {\n            const typeName: string = relationship.data[typeIndex].type;\n\n            if (!includes(modelTypesFetched, typeName)) {\n              modelTypesFetched.push(typeName);\n              // tslint:disable-next-line:max-line-length\n              const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n              if (modelType) {\n                const relationshipModels: JsonApiModel[] = this.getHasManyRelationship(\n                  modelType,\n                  relationship.data,\n                  included,\n                  typeName,\n                  remainingModels\n                );\n\n                if (relationshipModels.length > 0) {\n                  allModels = allModels.concat(relationshipModels);\n                }\n              } else {\n                throw {message: `parseHasMany - Model type for relationship ${typeName} not found.`};\n              }\n            }\n          }\n\n          this[metadata.propertyName] = allModels;\n        }\n      }\n    }\n  }\n\n  private parseBelongsTo(data: any, included: Array<any>, remainingModels: Array<any>): void {\n    const belongsTo: any = Reflect.getMetadata('BelongsTo', this);\n\n    if (belongsTo) {\n      for (const metadata of belongsTo) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n        if (relationship && relationship.data) {\n          const dataRelationship: any = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\n          if (dataRelationship) {\n            const typeName: string = dataRelationship.type;\n            // tslint:disable-next-line:max-line-length\n            const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n            if (modelType) {\n              const relationshipModel = this.getBelongsToRelationship(\n                modelType,\n                dataRelationship,\n                included,\n                typeName,\n                remainingModels\n              );\n\n              if (relationshipModel) {\n                this[metadata.propertyName] = relationshipModel;\n              }\n            } else {\n              throw {message: `parseBelongsTo - Model type for relationship ${typeName} not found.`};\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private getHasManyRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: any,\n    typeName: string,\n    remainingModels: Array<any>\n  ): Array<T> {\n    const relationshipList: Array<T> = [];\n\n    data.forEach((item: any) => {\n      const relationshipData: any = find(included, {id: item.id, type: typeName} as any);\n\n      if (relationshipData) {\n        const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n        const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n        const modelsForProcessing = remainingModels.concat([]);\n\n        if (indexOfNewlyFoundModel !== -1) {\n          modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n          newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n        }\n\n        relationshipList.push(newObject);\n      }\n    });\n\n    return relationshipList;\n  }\n\n  private getBelongsToRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: Array<any>,\n    typeName: string,\n    remainingModels: Array<any>\n  ): T | null {\n    const id: string = data.id;\n\n    const relationshipData: any = find(included, {id, type: typeName} as any);\n\n    if (relationshipData) {\n      const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n      const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n      const modelsForProcessing = remainingModels.concat([]);\n\n      if (indexOfNewlyFoundModel !== -1) {\n        modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n        newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n      }\n\n      return newObject;\n    }\n\n    return this.internalDatastore.peekRecord(modelType, id);\n  }\n\n  private createOrPeek<T extends JsonApiModel>(modelType: ModelType<T>, data: any): T {\n    const peek = this.internalDatastore.peekRecord(modelType, data.id);\n\n    if (peek) {\n      _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\n      return peek;\n    }\n\n    const newObject: T = this.internalDatastore.deserializeModel(modelType, data);\n    this.internalDatastore.addToStore(newObject);\n\n    return newObject;\n  }\n}\n","export interface JsonApiError {\n  id?: string;\n  links?: Array<any>;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: {\n    pointer?: string;\n    parameter?: string\n  };\n  meta?: any;\n}\n\nexport class ErrorResponse {\n  errors?: JsonApiError[] = [];\n\n  constructor(errors ?: JsonApiError[]) {\n    if (errors) {\n      this.errors = errors;\n    }\n  }\n}\n","export class JsonApiQueryData<T> {\n  constructor(protected jsonApiModels: Array<T>, protected metaData?: any) {\n  }\n\n  public getModels(): T[] {\n    return this.jsonApiModels;\n  }\n\n  public getMeta(): any {\n    return this.metaData;\n  }\n}\n","export interface Overrides {\n  getDirtyAttributes?: (attributedMetadata: any, model ?: any) => object;\n  toQueryString?: (params: any) => string;\n}\n","export interface JsonModelConverterConfig {\n  nullValue?: boolean;\n  hasMany?: boolean;\n}\n","import { Overrides } from './overrides.interface';\n\nexport interface DatastoreConfig {\n  apiVersion?: string;\n  baseUrl?: string;\n  models?: object;\n  overrides?: Overrides;\n}\n","import { MetaModelType } from '../models/json-api-meta.model';\n\nexport interface ModelConfig<T = any> {\n  type: string;\n  apiVersion?: string;\n  baseUrl?: string;\n  modelEndpointUrl?: string;\n  meta?: MetaModelType<T>;\n}\n","import { PropertyConverter } from './property-converter.interface';\n\nexport interface AttributeDecoratorOptions {\n  serializedName?: string;\n  converter?: PropertyConverter;\n}\n","export interface PropertyConverter {\n  mask(value: any): any;\n\n  unmask(value: any): any;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport find from 'lodash-es/find';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, of, throwError } from 'rxjs';\nimport { JsonApiModel } from '../models/json-api.model';\nimport { ErrorResponse } from '../models/error-response.model';\nimport { JsonApiQueryData } from '../models/json-api-query-data';\nimport * as qs from 'qs';\nimport { DatastoreConfig } from '../interfaces/datastore-config.interface';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport { AttributeMetadata } from '../constants/symbols';\nimport 'reflect-metadata';\n\nexport type ModelType<T extends JsonApiModel> = new(datastore: JsonApiDatastore, data: any) => T;\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\n@Injectable()\nexport class JsonApiDatastore {\n\n  protected config: DatastoreConfig;\n  private globalHeaders: HttpHeaders;\n  private globalRequestOptions: object = {};\n  private internalStore: { [type: string]: { [id: string]: JsonApiModel } } = {};\n  private toQueryString: (params: any) => string = this.datastoreConfig.overrides\n  && this.datastoreConfig.overrides.toQueryString ?\n    this.datastoreConfig.overrides.toQueryString : this._toQueryString;\n\n  constructor(protected http: HttpClient) {\n  }\n\n  set headers(headers: HttpHeaders) {\n    this.globalHeaders = headers;\n  }\n\n  set requestOptions(requestOptions: object) {\n    this.globalRequestOptions = requestOptions;\n  }\n\n  public get datastoreConfig(): DatastoreConfig {\n    const configFromDecorator: DatastoreConfig = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\n    return Object.assign(configFromDecorator, this.config);\n  }\n\n  private get getDirtyAttributes() {\n    if (this.datastoreConfig.overrides\n      && this.datastoreConfig.overrides.getDirtyAttributes) {\n      return this.datastoreConfig.overrides.getDirtyAttributes;\n    }\n    return JsonApiDatastore.getDirtyAttributes;\n  }\n\n  private static getDirtyAttributes(attributesMetadata: any): { string: any } {\n    const dirtyData: any = {};\n\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\n          dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\n        }\n      }\n    }\n    return dirtyData;\n  }\n\n  /**\n   * @deprecated use findAll method to take all models\n   */\n  query<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T[]> {\n    const requestHeaders: HttpHeaders = this.buildHttpHeaders(headers);\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    return this.http.get(url, {headers: requestHeaders})\n      .pipe(\n        map((res: any) => this.extractQueryData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findAll<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<JsonApiQueryData<T>> {\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractQueryData(res, modelType, true)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n    const url: string = this.buildUrl(modelType, params, id, customUrl);\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractRecordData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public createRecord<T extends JsonApiModel>(modelType: ModelType<T>, data?: any): T {\n    return new modelType(this, {attributes: data});\n  }\n\n  public saveRecord<T extends JsonApiModel>(\n    attributesMetadata: any,\n    model: T,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const modelType = model.constructor as ModelType<T>;\n    const modelConfig: ModelConfig = model.modelConfig;\n    const typeName: string = modelConfig.type;\n    const relationships: any = this.getRelationships(model);\n    const url: string = this.buildUrl(modelType, params, model.id, customUrl);\n\n    let httpCall: Observable<HttpResponse<object>>;\n    const body: any = {\n      data: {\n        relationships,\n        type: typeName,\n        id: model.id,\n        attributes: this.getDirtyAttributes(attributesMetadata, model)\n      }\n    };\n\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n\n    if (model.id) {\n      httpCall = this.http.patch<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    } else {\n      httpCall = this.http.post<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    }\n\n    return httpCall\n      .pipe(\n        map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model),\n        catchError((res) => {\n          if (res == null) {\n            return of(model);\n          }\n          return this.handleError(res);\n        }),\n        map((res) => this.updateRelationships(res, relationships))\n      );\n  }\n\n  public deleteRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<Response> {\n    const requestOptions: object = this.buildRequestOptions({headers});\n    const url: string = this.buildUrl(modelType, null, id, customUrl);\n\n    return this.http.delete(url, requestOptions)\n      .pipe(\n        catchError((res: HttpErrorResponse) => this.handleError(res))\n      );\n  }\n\n  public peekRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string): T | null {\n    const type: string = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    return this.internalStore[type] ? this.internalStore[type][id] as T : null;\n  }\n\n  public peekAll<T extends JsonApiModel>(modelType: ModelType<T>): Array<T> {\n    const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    const typeStore = this.internalStore[type];\n    return typeStore ? Object.keys(typeStore).map((key) => typeStore[key] as T) : [];\n  }\n\n  public deserializeModel<T extends JsonApiModel>(modelType: ModelType<T>, data: any) {\n    data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\n    return new modelType(this, data);\n  }\n\n  public addToStore(modelOrModels: JsonApiModel | JsonApiModel[]): void {\n    const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\n    const type: string = models[0].modelConfig.type;\n    let typeStore = this.internalStore[type];\n\n    if (!typeStore) {\n      typeStore = this.internalStore[type] = {};\n    }\n\n    for (const model of models) {\n      typeStore[model.id] = model;\n    }\n  }\n\n  public transformSerializedNamesToPropertyNames<T extends JsonApiModel>(modelType: ModelType<T>, attributes: any) {\n    const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\n    const properties: any = {};\n\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (attributes && attributes[serializedName] !== null && attributes[serializedName] !== undefined) {\n        properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected buildUrl<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    id?: string,\n    customUrl?: string\n  ): string {\n    // TODO: use HttpParams instead of appending a string to the url\n    const queryParams: string = this.toQueryString(params);\n\n    if (customUrl) {\n      return queryParams ? `${customUrl}?${queryParams}` : customUrl;\n    }\n\n    const modelConfig: ModelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\n\n    const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\n    const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\n    const modelEndpointUrl: string = modelConfig.modelEndpointUrl || modelConfig.type;\n\n    const url: string = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\n\n    return queryParams ? `${url}?${queryParams}` : url;\n  }\n\n  protected getRelationships(data: any): any {\n    let relationships: any;\n\n    const belongsToMetadata: any[] = Reflect.getMetadata('BelongsTo', data) || [];\n    const hasManyMetadata: any[] = Reflect.getMetadata('HasMany', data) || [];\n\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        if (data[key] instanceof JsonApiModel) {\n          relationships = relationships || {};\n\n          if (data[key].id) {\n            const entity = belongsToMetadata.find((it: any) => it.propertyName === key);\n            const relationshipKey = entity.relationship;\n            relationships[relationshipKey] = {\n              data: this.buildSingleRelationshipData(data[key])\n            };\n          }\n        } else if (data[key] instanceof Array) {\n          const entity = hasManyMetadata.find((it: any) => it.propertyName === key);\n          if (entity && this.isValidToManyRelation(data[key])) {\n            relationships = relationships || {};\n\n            const relationshipKey = entity.relationship;\n            const relationshipData = data[key]\n              .filter((model: JsonApiModel) => model.id)\n              .map((model: JsonApiModel) => this.buildSingleRelationshipData(model));\n\n            relationships[relationshipKey] = {\n              data: relationshipData\n            };\n          }\n        }\n      }\n    }\n\n    return relationships;\n  }\n\n  protected isValidToManyRelation(objects: Array<any>): boolean {\n    if (!objects.length) {\n      return true;\n    }\n    const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\n    if (!isJsonApiModel) {\n      return false;\n    }\n    const types = objects.map((item: JsonApiModel) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\n    return types\n      .filter((type: string, index: number, self: string[]) => self.indexOf(type) === index)\n      .length === 1;\n  }\n\n  protected buildSingleRelationshipData(model: JsonApiModel): any {\n    const relationshipType: string = model.modelConfig.type;\n    const relationShipData: { type: string, id?: string, attributes?: any } = {type: relationshipType};\n\n    if (model.id) {\n      relationShipData.id = model.id;\n    } else {\n      const attributesMetadata: any = Reflect.getMetadata('Attribute', model);\n      relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\n    }\n\n    return relationShipData;\n  }\n\n  protected extractQueryData<T extends JsonApiModel>(\n    response: HttpResponse<object>,\n    modelType: ModelType<T>,\n    withMeta = false\n  ): Array<T> | JsonApiQueryData<T> {\n    const body: any = response.body;\n    const models: T[] = [];\n\n    body.data.forEach((data: any) => {\n      const model: T = this.deserializeModel(modelType, data);\n      this.addToStore(model);\n\n      if (body.included) {\n        model.syncRelationships(data, body.included.concat(data));\n        this.addToStore(model);\n      }\n\n      models.push(model);\n    });\n\n    if (withMeta && withMeta === true) {\n      return new JsonApiQueryData(models, this.parseMeta(body, modelType));\n    }\n\n    return models;\n  }\n\n  protected extractRecordData<T extends JsonApiModel>(\n    res: HttpResponse<object>,\n    modelType: ModelType<T>,\n    model?: T\n  ): T {\n    const body: any = res.body;\n    // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\n    // null is converted to 'null', so this is temporary needed to make testcase possible\n    // (and to avoid a decrease of the coverage)\n    if (!body || body === 'null') {\n      throw new Error('no body in response');\n    }\n\n    if (!body.data) {\n      if (res.status === 201 || !model) {\n        throw new Error('expected data in response');\n      }\n      return model;\n    }\n\n    if (model) {\n      model.modelInitialization = true;\n      model.id = body.data.id;\n      Object.assign(model, body.data.attributes);\n      model.modelInitialization = false;\n    }\n\n    const deserializedModel = model || this.deserializeModel(modelType, body.data);\n    this.addToStore(deserializedModel);\n    if (body.included) {\n      deserializedModel.syncRelationships(body.data, body.included);\n      this.addToStore(deserializedModel);\n    }\n\n    return deserializedModel;\n  }\n\n  protected handleError(error: any): Observable<any> {\n    if (\n      error instanceof HttpErrorResponse &&\n      error.error instanceof Object &&\n      error.error.errors &&\n      error.error.errors instanceof Array\n    ) {\n      const errors: ErrorResponse = new ErrorResponse(error.error.errors);\n      return throwError(errors);\n    }\n\n    return throwError(error);\n  }\n\n  protected parseMeta(body: any, modelType: ModelType<JsonApiModel>): any {\n    const metaModel: any = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\n    return new metaModel(body);\n  }\n\n  /**\n   * @deprecated use buildHttpHeaders method to build request headers\n   */\n  protected getOptions(customHeaders?: HttpHeaders): any {\n    return {\n      headers: this.buildHttpHeaders(customHeaders),\n    };\n  }\n\n  protected buildHttpHeaders(customHeaders?: HttpHeaders): HttpHeaders {\n    let requestHeaders: HttpHeaders = new HttpHeaders({\n      Accept: 'application/vnd.api+json',\n      'Content-Type': 'application/vnd.api+json'\n    });\n\n    if (this.globalHeaders) {\n      this.globalHeaders.keys().forEach((key) => {\n        if (this.globalHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\n        }\n      });\n    }\n\n    if (customHeaders) {\n      customHeaders.keys().forEach((key) => {\n        if (customHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, customHeaders.get(key));\n        }\n      });\n    }\n\n    return requestHeaders;\n  }\n\n  protected resetMetadataAttributes<T extends JsonApiModel>(res: T, attributesMetadata: any, modelType: ModelType<T>) {\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          metadata.hasDirtyAttributes = false;\n        }\n      }\n    }\n\n    // @ts-ignore\n    res[AttributeMetadataIndex] = attributesMetadata;\n    return res;\n  }\n\n  protected updateRelationships<T extends JsonApiModel>(model: T, relationships: any): T {\n    const modelsTypes: any = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\n\n    for (const relationship in relationships) {\n      if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship)) {\n        const relationshipModel: JsonApiModel = model[relationship];\n        const hasMany: any[] = Reflect.getMetadata('HasMany', relationshipModel);\n        const propertyHasMany: any = find(hasMany, (property) => {\n          return modelsTypes[property.relationship] === model.constructor;\n        });\n\n        if (propertyHasMany) {\n          relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\n\n          const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\n\n          if (indexOfModel === -1) {\n            relationshipModel[propertyHasMany.propertyName].push(model);\n          } else {\n            relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\n          }\n        }\n      }\n    }\n\n    return model;\n  }\n\n  protected getModelPropertyNames(model: JsonApiModel) {\n    return Reflect.getMetadata('AttributeMapping', model) || [];\n  }\n\n  private buildRequestOptions(customOptions: any = {}): object {\n    const httpHeaders: HttpHeaders = this.buildHttpHeaders(customOptions.headers);\n\n    const requestOptions: object = Object.assign(customOptions, {\n      headers: httpHeaders\n    });\n\n    return Object.assign(this.globalRequestOptions, requestOptions);\n  }\n\n  private _toQueryString(params: any): string {\n    return qs.stringify(params, {arrayFormat: 'brackets'});\n  }\n}\n","import { JsonApiDatastore } from './services/json-api-datastore.service';\n\nexport * from './services/json-api-datastore.service';\n\nexport const PROVIDERS: any[] = [\n  JsonApiDatastore\n];\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PROVIDERS } from './providers';\n\n@NgModule({\n  providers: [PROVIDERS],\n  exports: [HttpClientModule]\n})\nexport class JsonApiModule {\n}\n"],"names":["tslib_1.__values","_.isEqual","_.cloneDeep","_.forEach","_.extend","AttributeMetadataIndex","qs.stringify"],"mappings":"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"}