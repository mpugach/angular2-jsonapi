{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular2-jsonapi/models/json-nested.model.ts","ng://angular2-jsonapi/converters/json-model/json-model.converter.ts","ng://angular2-jsonapi/constants/symbols.ts","ng://angular2-jsonapi/converters/date/date.converter.ts","ng://angular2-jsonapi/models/json-api-meta.model.ts","ng://angular2-jsonapi/models/json-api.model.ts","ng://angular2-jsonapi/models/error-response.model.ts","ng://angular2-jsonapi/models/json-api-query-data.ts","ng://angular2-jsonapi/services/json-api-datastore.service.ts","ng://angular2-jsonapi/providers.ts","ng://angular2-jsonapi/module.ts","ng://angular2-jsonapi/decorators/attribute.decorator.ts","ng://angular2-jsonapi/decorators/belongs-to.decorator.ts","ng://angular2-jsonapi/decorators/has-many.decorator.ts","ng://angular2-jsonapi/decorators/json-api-datastore-config.decorator.ts","ng://angular2-jsonapi/decorators/json-api-model-config.decorator.ts","ng://angular2-jsonapi/decorators/json-attribute.decorator.ts","ng://angular2-jsonapi/decorators/nested-attribute.decorator.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","JsonApiNestedModel","data","nestedDataSerialization","defineProperty","Reflect","getMetadata","constructor","fill","serialize","transformSerializedNamesToPropertyNames","_this","serializedNameToPropertyName","getModelPropertyNames","properties","keys","forEach","serializedName","undefined","DEFAULT_OPTIONS","nullValue","hasMany","JsonModelConverter","model","options","modelType","mask","result","Array","isArray","Error","value_1","tslib_1.__values","value_1_1","item","temp","push","unmask","value_2","value_2_1","AttributeMetadata","DateConverter","parseISO","toISOString","JsonApiMetaModel","response","links","meta","AttributeMetadataIndex","parseRelationshipLinks","relationships","_.forEach","_a","key","JsonApiModel","internalDatastore","modelInitialization","relationshipLinks","id","attributes","isModelInitialization","syncRelationships","included","remainingModels","lastSyncModels","modelsForProcessing","concat","parseHasMany","parseBelongsTo","save","params","headers","customUrl","checkChanges","attributesMetadata","saveRecord","hasDirtyAttributes","propertyName","nested","_.isEqual","oldValue","newValue","serialisationValue","converter","_.cloneDeep","rollbackAttributes","hasMany_1","hasMany_1_1","metadata","relationship","allModels","modelTypesFetched","_c","e_2","_d","typeIndex","typeName","type","includes","models","message","relationshipModels","getHasManyRelationship","belongsTo","belongsTo_1","belongsTo_1_1","dataRelationship","relationshipModel","getBelongsToRelationship","relationshipList","relationshipData","find","newObject","createOrPeek","indexOfNewlyFoundModel","indexOf","splice","peekRecord","peek","_.extend","deserializeModel","addToStore","ErrorResponse","errors","JsonApiQueryData","jsonApiModels","metaData","getModels","getMeta","JsonApiDatastore","http","globalRequestOptions","internalStore","toQueryString","datastoreConfig","overrides","_toQueryString","globalHeaders","requestOptions","configFromDecorator","config","getDirtyAttributes","dirtyData","query","requestHeaders","buildHttpHeaders","url","buildUrl","get","pipe","map","res","extractQueryData","catchError","handleError","findAll","buildRequestOptions","observe","findRecord","extractRecordData","createRecord","modelConfig","getRelationships","body","patch","post","status","of","updateRelationships","deleteRecord","delete","peekAll","typeStore","modelOrModels","models_1","models_1_1","queryParams","baseUrl","apiVersion","modelEndpointUrl","filter","x","join","belongsToMetadata","hasManyMetadata","relationshipKey","entity","it","this_1","buildSingleRelationshipData","isValidToManyRelation","objects","every","index","self","relationShipData","withMeta","parseMeta","deserializedModel","error","HttpErrorResponse","throwError","metaModel","getOptions","customHeaders","HttpHeaders","Accept","Content-Type","has","set","resetMetadataAttributes","modelsTypes","propertyHasMany","property","indexOfModel","customOptions","httpHeaders","qs.stringify","arrayFormat","Injectable","HttpClient","PROVIDERS","JsonApiModule","NgModule","args","providers","exports","HttpClientModule","target","dataType","forSerialisation","attrConverter","Date","datatype","marked","defineMetadata","mappingMetadata","saveAnnotations","newVal","targetType","convertedValue","instance","setMetadata","enumerable","configurable","annotations","updateMetadata"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ModelConfig } from '../interfaces/model-config.interface';\nimport { JsonApiModel } from './json-api.model';\n\nexport class JsonApiNestedModel {\n  [key: string]: any;\n\n  public nestedDataSerialization = false;\n\n  constructor(data?: any) {\n    if (data) {\n      Object.assign(this, data);\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  public fill(data: any) {\n    Object.assign(this, data);\n  }\n\n  public serialize(): any {\n    return this.transformSerializedNamesToPropertyNames();\n  }\n\n  protected transformSerializedNamesToPropertyNames<T extends JsonApiModel>() {\n    const serializedNameToPropertyName = this.getModelPropertyNames();\n    const properties: any = {};\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (this && this[serializedName] !== null &&\n        this[serializedName] !== undefined && serializedName !== 'nestedDataSerialization') {\n        properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected getModelPropertyNames() {\n    return Reflect.getMetadata('AttributeMapping', this) || [];\n  }\n}\n","import { JsonModelConverterConfig } from '../../interfaces/json-model-converter-config.interface';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\nimport { JsonApiNestedModel } from '../../models/json-nested.model';\n\nexport const DEFAULT_OPTIONS: JsonModelConverterConfig = {\n  nullValue: false,\n  hasMany: false\n};\n\nexport class JsonModelConverter<T> implements PropertyConverter {\n  private modelType: any; // ModelType<T>\n  private options: JsonModelConverterConfig;\n\n  constructor(model: T, options: JsonModelConverterConfig = {}) {\n    this.modelType = model; // <ModelType<T>>model\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  mask(value: any): T | Array<T> {\n    if (!value && !this.options.nullValue) {\n      if (this.options.hasMany) {\n        return [];\n      }\n      return new this.modelType();\n    }\n\n    let result = null;\n    if (this.options.hasMany) {\n      if (!Array.isArray(value)) {\n        throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\n      }\n      result = [];\n      for (const item of value) {\n        if (item === null) {\n          continue;\n        }\n        let temp;\n        if (typeof item === 'object') {\n          temp = new this.modelType();\n          temp.fill(item);\n        } else {\n          temp = item;\n        }\n\n        result.push(temp);\n      }\n    } else {\n      if (!(value instanceof this.modelType)) {\n        result = new this.modelType();\n        result.fill(value);\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n\n  unmask(value: any): any {\n    if (!value) {\n      return value;\n    }\n    let result = null;\n    if (Array.isArray(value)) {\n      result = [];\n      for (const item of value) {\n        if (!item) {\n          continue;\n        }\n        if (item instanceof JsonApiNestedModel) {\n          item.nestedDataSerialization = true;\n          result.push(item.serialize());\n          item.nestedDataSerialization = false;\n        } else {\n          result.push(item);\n        }\n      }\n    } else {\n      if (value instanceof JsonApiNestedModel) {\n        value.nestedDataSerialization = true;\n        result = value.serialize();\n        value.nestedDataSerialization = false;\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n}\n","// tslint:disable-next-line:variable-name\nexport const AttributeMetadata = Symbol('AttributeMetadata') as any;\n","import { parseISO } from 'date-fns';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\n\nexport class DateConverter implements PropertyConverter {\n  mask(value: any) {\n    if (typeof value === 'string') {\n      return parseISO(value);\n    } else {\n      return value;\n    }\n  }\n\n  unmask(value: any) {\n    return value.toISOString();\n  }\n}\n","export type MetaModelType<T> = new(response: any) => T;\n\nexport class JsonApiMetaModel {\n  public links: Array<any>;\n  public meta: any;\n\n  constructor(response: any) {\n    this.links = response.links || [];\n    this.meta = response.meta;\n  }\n}\n","import find from 'lodash-es/find';\nimport includes from 'lodash-es/includes';\nimport { Observable } from 'rxjs';\nimport { JsonApiDatastore, ModelType } from '../services/json-api-datastore.service';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport * as _ from 'lodash';\nimport { AttributeMetadata } from '../constants/symbols';\nimport { HttpHeaders } from '@angular/common/http';\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\nconst parseRelationshipLinks = relationships => {\n  const result = {};\n  const linksMapper = ({ links }, key) => {\n    if (links) {\n      result[key] = { links };\n    }\n  };\n\n  _.forEach(relationships || {}, linksMapper);\n\n  return result;\n};\n\nexport class JsonApiModel {\n  id: string;\n  public modelInitialization = false;\n  public relationshipLinks = {};\n\n  [key: string]: any;\n\n  lastSyncModels: Array<any>;\n\n  constructor(private internalDatastore: JsonApiDatastore, data?: any) {\n    if (data) {\n      this.modelInitialization = true;\n      this.id = data.id;\n      this.relationshipLinks = parseRelationshipLinks(data.relationships);\n      Object.assign(this, data.attributes);\n      this.modelInitialization = false;\n    }\n  }\n\n  public isModelInitialization(): boolean {\n    return this.modelInitialization;\n  }\n\n  public syncRelationships(data: any, included: any, remainingModels?: Array<any>): void {\n    if (this.lastSyncModels === included) {\n      return;\n    }\n\n    if (data) {\n      let modelsForProcessing = remainingModels;\n\n      if (modelsForProcessing === undefined) {\n        modelsForProcessing = [].concat(included);\n      }\n\n      this.parseHasMany(data, included, modelsForProcessing);\n      this.parseBelongsTo(data, included, modelsForProcessing);\n    }\n\n    this.lastSyncModels = included;\n  }\n\n  public save(params?: any, headers?: HttpHeaders, customUrl?: string): Observable<this> {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\n  }\n\n  get hasDirtyAttributes() {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    let hasDirtyAttributes = false;\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.hasDirtyAttributes) {\n          hasDirtyAttributes = true;\n          break;\n        }\n      }\n    }\n    return hasDirtyAttributes;\n  }\n\n  private checkChanges() {\n    const attributesMetadata: any = this[AttributeMetadata];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.nested) {\n          this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n            attributesMetadata[propertyName].oldValue,\n            attributesMetadata[propertyName].newValue\n          );\n          this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(\n            Reflect.getMetadata('design:type', this, propertyName),\n            _.cloneDeep(attributesMetadata[propertyName].newValue),\n            true\n          );\n        }\n      }\n    }\n  }\n\n  public rollbackAttributes(): void {\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        if (attributesMetadata[propertyName].hasDirtyAttributes) {\n          this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\n        }\n      }\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  private parseHasMany(data: any, included: any, remainingModels: Array<any>): void {\n    const hasMany: any = Reflect.getMetadata('HasMany', this);\n\n    if (hasMany) {\n      for (const metadata of hasMany) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n\n        if (relationship && relationship.data && Array.isArray(relationship.data)) {\n          let allModels: JsonApiModel[] = [];\n          const modelTypesFetched: any = [];\n\n          for (const typeIndex of Object.keys(relationship.data)) {\n            const typeName: string = relationship.data[typeIndex].type;\n\n            if (!includes(modelTypesFetched, typeName)) {\n              modelTypesFetched.push(typeName);\n              // tslint:disable-next-line:max-line-length\n              const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n              if (modelType) {\n                const relationshipModels: JsonApiModel[] = this.getHasManyRelationship(\n                  modelType,\n                  relationship.data,\n                  included,\n                  typeName,\n                  remainingModels\n                );\n\n                if (relationshipModels.length > 0) {\n                  allModels = allModels.concat(relationshipModels);\n                }\n              } else {\n                throw {message: `parseHasMany - Model type for relationship ${typeName} not found.`};\n              }\n            }\n          }\n\n          this[metadata.propertyName] = allModels;\n        }\n      }\n    }\n  }\n\n  private parseBelongsTo(data: any, included: Array<any>, remainingModels: Array<any>): void {\n    const belongsTo: any = Reflect.getMetadata('BelongsTo', this);\n\n    if (belongsTo) {\n      for (const metadata of belongsTo) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n        if (relationship && relationship.data) {\n          const dataRelationship: any = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\n          if (dataRelationship) {\n            const typeName: string = dataRelationship.type;\n            // tslint:disable-next-line:max-line-length\n            const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n            if (modelType) {\n              const relationshipModel = this.getBelongsToRelationship(\n                modelType,\n                dataRelationship,\n                included,\n                typeName,\n                remainingModels\n              );\n\n              if (relationshipModel) {\n                this[metadata.propertyName] = relationshipModel;\n              }\n            } else {\n              throw {message: `parseBelongsTo - Model type for relationship ${typeName} not found.`};\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private getHasManyRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: any,\n    typeName: string,\n    remainingModels: Array<any>\n  ): Array<T> {\n    const relationshipList: Array<T> = [];\n\n    data.forEach((item: any) => {\n      const relationshipData: any = find(included, {id: item.id, type: typeName} as any);\n\n      if (relationshipData) {\n        const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n        const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n        const modelsForProcessing = remainingModels.concat([]);\n\n        if (indexOfNewlyFoundModel !== -1) {\n          modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n          newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n        }\n\n        relationshipList.push(newObject);\n      }\n    });\n\n    return relationshipList;\n  }\n\n  private getBelongsToRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: Array<any>,\n    typeName: string,\n    remainingModels: Array<any>\n  ): T | null {\n    const id: string = data.id;\n\n    const relationshipData: any = find(included, {id, type: typeName} as any);\n\n    if (relationshipData) {\n      const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n      const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n      const modelsForProcessing = remainingModels.concat([]);\n\n      if (indexOfNewlyFoundModel !== -1) {\n        modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n        newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n      }\n\n      return newObject;\n    }\n\n    return this.internalDatastore.peekRecord(modelType, id);\n  }\n\n  private createOrPeek<T extends JsonApiModel>(modelType: ModelType<T>, data: any): T {\n    const peek = this.internalDatastore.peekRecord(modelType, data.id);\n\n    if (peek) {\n      _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\n      return peek;\n    }\n\n    const newObject: T = this.internalDatastore.deserializeModel(modelType, data);\n    this.internalDatastore.addToStore(newObject);\n\n    return newObject;\n  }\n}\n","export interface JsonApiError {\n  id?: string;\n  links?: Array<any>;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: {\n    pointer?: string;\n    parameter?: string\n  };\n  meta?: any;\n}\n\nexport class ErrorResponse {\n  errors?: JsonApiError[] = [];\n\n  constructor(errors ?: JsonApiError[]) {\n    if (errors) {\n      this.errors = errors;\n    }\n  }\n}\n","export class JsonApiQueryData<T> {\n  constructor(protected jsonApiModels: Array<T>, protected metaData?: any) {\n  }\n\n  public getModels(): T[] {\n    return this.jsonApiModels;\n  }\n\n  public getMeta(): any {\n    return this.metaData;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport find from 'lodash-es/find';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, of, throwError } from 'rxjs';\nimport { JsonApiModel } from '../models/json-api.model';\nimport { ErrorResponse } from '../models/error-response.model';\nimport { JsonApiQueryData } from '../models/json-api-query-data';\nimport * as qs from 'qs';\nimport { DatastoreConfig } from '../interfaces/datastore-config.interface';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport { AttributeMetadata } from '../constants/symbols';\nimport 'reflect-metadata';\n\nexport type ModelType<T extends JsonApiModel> = new(datastore: JsonApiDatastore, data: any) => T;\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\n@Injectable()\nexport class JsonApiDatastore {\n\n  protected config: DatastoreConfig;\n  private globalHeaders: HttpHeaders;\n  private globalRequestOptions: object = {};\n  private internalStore: { [type: string]: { [id: string]: JsonApiModel } } = {};\n  private toQueryString: (params: any) => string = this.datastoreConfig.overrides\n  && this.datastoreConfig.overrides.toQueryString ?\n    this.datastoreConfig.overrides.toQueryString : this._toQueryString;\n\n  constructor(protected http: HttpClient) {\n  }\n\n  set headers(headers: HttpHeaders) {\n    this.globalHeaders = headers;\n  }\n\n  set requestOptions(requestOptions: object) {\n    this.globalRequestOptions = requestOptions;\n  }\n\n  public get datastoreConfig(): DatastoreConfig {\n    const configFromDecorator: DatastoreConfig = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\n    return Object.assign(configFromDecorator, this.config);\n  }\n\n  private get getDirtyAttributes() {\n    if (this.datastoreConfig.overrides\n      && this.datastoreConfig.overrides.getDirtyAttributes) {\n      return this.datastoreConfig.overrides.getDirtyAttributes;\n    }\n    return JsonApiDatastore.getDirtyAttributes;\n  }\n\n  private static getDirtyAttributes(attributesMetadata: any): { string: any } {\n    const dirtyData: any = {};\n\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\n          dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\n        }\n      }\n    }\n    return dirtyData;\n  }\n\n  /**\n   * @deprecated use findAll method to take all models\n   */\n  query<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T[]> {\n    const requestHeaders: HttpHeaders = this.buildHttpHeaders(headers);\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    return this.http.get(url, {headers: requestHeaders})\n      .pipe(\n        map((res: any) => this.extractQueryData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findAll<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<JsonApiQueryData<T>> {\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractQueryData(res, modelType, true)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n    const url: string = this.buildUrl(modelType, params, id, customUrl);\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractRecordData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public createRecord<T extends JsonApiModel>(modelType: ModelType<T>, data?: any): T {\n    return new modelType(this, {attributes: data});\n  }\n\n  public saveRecord<T extends JsonApiModel>(\n    attributesMetadata: any,\n    model: T,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const modelType = model.constructor as ModelType<T>;\n    const modelConfig: ModelConfig = model.modelConfig;\n    const typeName: string = modelConfig.type;\n    const relationships: any = this.getRelationships(model);\n    const url: string = this.buildUrl(modelType, params, model.id, customUrl);\n\n    let httpCall: Observable<HttpResponse<object>>;\n    const body: any = {\n      data: {\n        relationships,\n        type: typeName,\n        id: model.id,\n        attributes: this.getDirtyAttributes(attributesMetadata, model)\n      }\n    };\n\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n\n    if (model.id) {\n      httpCall = this.http.patch<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    } else {\n      httpCall = this.http.post<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    }\n\n    return httpCall\n      .pipe(\n        map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model),\n        catchError((res) => {\n          if (res == null) {\n            return of(model);\n          }\n          return this.handleError(res);\n        }),\n        map((res) => this.updateRelationships(res, relationships))\n      );\n  }\n\n  public deleteRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<Response> {\n    const requestOptions: object = this.buildRequestOptions({headers});\n    const url: string = this.buildUrl(modelType, null, id, customUrl);\n\n    return this.http.delete(url, requestOptions)\n      .pipe(\n        catchError((res: HttpErrorResponse) => this.handleError(res))\n      );\n  }\n\n  public peekRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string): T | null {\n    const type: string = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    return this.internalStore[type] ? this.internalStore[type][id] as T : null;\n  }\n\n  public peekAll<T extends JsonApiModel>(modelType: ModelType<T>): Array<T> {\n    const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    const typeStore = this.internalStore[type];\n    return typeStore ? Object.keys(typeStore).map((key) => typeStore[key] as T) : [];\n  }\n\n  public deserializeModel<T extends JsonApiModel>(modelType: ModelType<T>, data: any) {\n    data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\n    return new modelType(this, data);\n  }\n\n  public addToStore(modelOrModels: JsonApiModel | JsonApiModel[]): void {\n    const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\n    const type: string = models[0].modelConfig.type;\n    let typeStore = this.internalStore[type];\n\n    if (!typeStore) {\n      typeStore = this.internalStore[type] = {};\n    }\n\n    for (const model of models) {\n      typeStore[model.id] = model;\n    }\n  }\n\n  public transformSerializedNamesToPropertyNames<T extends JsonApiModel>(modelType: ModelType<T>, attributes: any) {\n    const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\n    const properties: any = {};\n\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (attributes && attributes[serializedName] !== null && attributes[serializedName] !== undefined) {\n        properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected buildUrl<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    id?: string,\n    customUrl?: string\n  ): string {\n    // TODO: use HttpParams instead of appending a string to the url\n    const queryParams: string = this.toQueryString(params);\n\n    if (customUrl) {\n      return queryParams ? `${customUrl}?${queryParams}` : customUrl;\n    }\n\n    const modelConfig: ModelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\n\n    const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\n    const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\n    const modelEndpointUrl: string = modelConfig.modelEndpointUrl || modelConfig.type;\n\n    const url: string = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\n\n    return queryParams ? `${url}?${queryParams}` : url;\n  }\n\n  protected getRelationships(data: any): any {\n    let relationships: any;\n\n    const belongsToMetadata: any[] = Reflect.getMetadata('BelongsTo', data) || [];\n    const hasManyMetadata: any[] = Reflect.getMetadata('HasMany', data) || [];\n\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        if (data[key] instanceof JsonApiModel) {\n          relationships = relationships || {};\n\n          if (data[key].id) {\n            const entity = belongsToMetadata.find((it: any) => it.propertyName === key);\n            const relationshipKey = entity.relationship;\n            relationships[relationshipKey] = {\n              data: this.buildSingleRelationshipData(data[key])\n            };\n          }\n        } else if (data[key] instanceof Array) {\n          const entity = hasManyMetadata.find((it: any) => it.propertyName === key);\n          if (entity && this.isValidToManyRelation(data[key])) {\n            relationships = relationships || {};\n\n            const relationshipKey = entity.relationship;\n            const relationshipData = data[key]\n              .filter((model: JsonApiModel) => model.id)\n              .map((model: JsonApiModel) => this.buildSingleRelationshipData(model));\n\n            relationships[relationshipKey] = {\n              data: relationshipData\n            };\n          }\n        }\n      }\n    }\n\n    return relationships;\n  }\n\n  protected isValidToManyRelation(objects: Array<any>): boolean {\n    if (!objects.length) {\n      return true;\n    }\n    const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\n    if (!isJsonApiModel) {\n      return false;\n    }\n    const types = objects.map((item: JsonApiModel) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\n    return types\n      .filter((type: string, index: number, self: string[]) => self.indexOf(type) === index)\n      .length === 1;\n  }\n\n  protected buildSingleRelationshipData(model: JsonApiModel): any {\n    const relationshipType: string = model.modelConfig.type;\n    const relationShipData: { type: string, id?: string, attributes?: any } = {type: relationshipType};\n\n    if (model.id) {\n      relationShipData.id = model.id;\n    } else {\n      const attributesMetadata: any = Reflect.getMetadata('Attribute', model);\n      relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\n    }\n\n    return relationShipData;\n  }\n\n  protected extractQueryData<T extends JsonApiModel>(\n    response: HttpResponse<object>,\n    modelType: ModelType<T>,\n    withMeta = false\n  ): Array<T> | JsonApiQueryData<T> {\n    const body: any = response.body;\n    const models: T[] = [];\n\n    body.data.forEach((data: any) => {\n      const model: T = this.deserializeModel(modelType, data);\n      this.addToStore(model);\n\n      if (body.included) {\n        model.syncRelationships(data, body.included.concat(data));\n        this.addToStore(model);\n      }\n\n      models.push(model);\n    });\n\n    if (withMeta && withMeta === true) {\n      return new JsonApiQueryData(models, this.parseMeta(body, modelType));\n    }\n\n    return models;\n  }\n\n  protected extractRecordData<T extends JsonApiModel>(\n    res: HttpResponse<object>,\n    modelType: ModelType<T>,\n    model?: T\n  ): T {\n    const body: any = res.body;\n    // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\n    // null is converted to 'null', so this is temporary needed to make testcase possible\n    // (and to avoid a decrease of the coverage)\n    if (!body || body === 'null') {\n      throw new Error('no body in response');\n    }\n\n    if (!body.data) {\n      if (res.status === 201 || !model) {\n        throw new Error('expected data in response');\n      }\n      return model;\n    }\n\n    if (model) {\n      model.modelInitialization = true;\n      model.id = body.data.id;\n      Object.assign(model, body.data.attributes);\n      model.modelInitialization = false;\n    }\n\n    const deserializedModel = model || this.deserializeModel(modelType, body.data);\n    this.addToStore(deserializedModel);\n    if (body.included) {\n      deserializedModel.syncRelationships(body.data, body.included);\n      this.addToStore(deserializedModel);\n    }\n\n    return deserializedModel;\n  }\n\n  protected handleError(error: any): Observable<any> {\n    if (\n      error instanceof HttpErrorResponse &&\n      error.error instanceof Object &&\n      error.error.errors &&\n      error.error.errors instanceof Array\n    ) {\n      const errors: ErrorResponse = new ErrorResponse(error.error.errors);\n      return throwError(errors);\n    }\n\n    return throwError(error);\n  }\n\n  protected parseMeta(body: any, modelType: ModelType<JsonApiModel>): any {\n    const metaModel: any = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\n    return new metaModel(body);\n  }\n\n  /**\n   * @deprecated use buildHttpHeaders method to build request headers\n   */\n  protected getOptions(customHeaders?: HttpHeaders): any {\n    return {\n      headers: this.buildHttpHeaders(customHeaders),\n    };\n  }\n\n  protected buildHttpHeaders(customHeaders?: HttpHeaders): HttpHeaders {\n    let requestHeaders: HttpHeaders = new HttpHeaders({\n      Accept: 'application/vnd.api+json',\n      'Content-Type': 'application/vnd.api+json'\n    });\n\n    if (this.globalHeaders) {\n      this.globalHeaders.keys().forEach((key) => {\n        if (this.globalHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\n        }\n      });\n    }\n\n    if (customHeaders) {\n      customHeaders.keys().forEach((key) => {\n        if (customHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, customHeaders.get(key));\n        }\n      });\n    }\n\n    return requestHeaders;\n  }\n\n  protected resetMetadataAttributes<T extends JsonApiModel>(res: T, attributesMetadata: any, modelType: ModelType<T>) {\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          metadata.hasDirtyAttributes = false;\n        }\n      }\n    }\n\n    // @ts-ignore\n    res[AttributeMetadataIndex] = attributesMetadata;\n    return res;\n  }\n\n  protected updateRelationships<T extends JsonApiModel>(model: T, relationships: any): T {\n    const modelsTypes: any = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\n\n    for (const relationship in relationships) {\n      if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship)) {\n        const relationshipModel: JsonApiModel = model[relationship];\n        const hasMany: any[] = Reflect.getMetadata('HasMany', relationshipModel);\n        const propertyHasMany: any = find(hasMany, (property) => {\n          return modelsTypes[property.relationship] === model.constructor;\n        });\n\n        if (propertyHasMany) {\n          relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\n\n          const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\n\n          if (indexOfModel === -1) {\n            relationshipModel[propertyHasMany.propertyName].push(model);\n          } else {\n            relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\n          }\n        }\n      }\n    }\n\n    return model;\n  }\n\n  protected getModelPropertyNames(model: JsonApiModel) {\n    return Reflect.getMetadata('AttributeMapping', model) || [];\n  }\n\n  private buildRequestOptions(customOptions: any = {}): object {\n    const httpHeaders: HttpHeaders = this.buildHttpHeaders(customOptions.headers);\n\n    const requestOptions: object = Object.assign(customOptions, {\n      headers: httpHeaders\n    });\n\n    return Object.assign(this.globalRequestOptions, requestOptions);\n  }\n\n  private _toQueryString(params: any): string {\n    return qs.stringify(params, {arrayFormat: 'brackets'});\n  }\n}\n","import { JsonApiDatastore } from './services/json-api-datastore.service';\n\nexport * from './services/json-api-datastore.service';\n\nexport const PROVIDERS: any[] = [\n  JsonApiDatastore\n];\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PROVIDERS } from './providers';\n\n@NgModule({\n  providers: [PROVIDERS],\n  exports: [HttpClientModule]\n})\nexport class JsonApiModule {\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\nimport * as _ from 'lodash';\n\nexport function Attribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('Attribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('Attribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const setMetadata = (\n      instance: any,\n      oldValue: any,\n      newValue: any\n    ) => {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      instance[AttributeMetadata][propertyName] = {\n        newValue,\n        oldValue,\n        nested: false,\n        serializedName: options.serializedName,\n        hasDirtyAttributes: !_.isEqual(oldValue, newValue),\n        serialisationValue: converter(targetType, newValue, true)\n      };\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      const convertedValue = converter(targetType, newVal);\n      let oldValue = null;\n      if (this.isModelInitialization() && this.id) {\n        oldValue = converter(targetType, newVal);\n      } else {\n        if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\n          oldValue = this[AttributeMetadata][propertyName].oldValue;\n        }\n      }\n\n      this[`_${propertyName}`] = convertedValue;\n      setMetadata(this, oldValue, convertedValue);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","export function BelongsTo(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('BelongsTo', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('BelongsTo', annotations, target);\n  };\n}\n","export function HasMany(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('HasMany', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('HasMany', annotations, target);\n  };\n}\n","export function JsonApiDatastoreConfig(config: any = {}) {\n  return (target: any) => {\n    Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\n  };\n}\n","import { JsonApiMetaModel } from '../models/json-api-meta.model';\nimport { ModelConfig } from '../interfaces/model-config.interface';\n\nexport function JsonApiModelConfig(config: ModelConfig) {\n  return (target: any) => {\n    if (typeof config.meta === 'undefined' || config.meta == null) {\n      config.meta = JsonApiMetaModel;\n    }\n\n    Reflect.defineMetadata('JsonApiModelConfig', config, target);\n  };\n}\n","import { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\n\nexport function JsonAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('JsonAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const getter = function() {\n      if (this.nestedDataSerialization) {\n        return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\n      }\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport * as _ from 'lodash';\n\nexport function NestedAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('NestedAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const updateMetadata = (instance: any) => {\n      const newValue = instance[`_${propertyName}`];\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\n        instance[AttributeMetadata][propertyName].newValue = newValue;\n        instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n          instance[AttributeMetadata][propertyName].oldValue,\n          newValue\n        );\n        instance[AttributeMetadata][propertyName].serialisationValue = newValue;\n      } else {\n        const oldValue = _.cloneDeep(newValue);\n        instance[AttributeMetadata][propertyName] = {\n          newValue,\n          oldValue,\n          converter,\n          nested: true,\n          hasDirtyAttributes: !_.isEqual(newValue, oldValue)\n        };\n      }\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n      updateMetadata(this);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n\n    }\n  };\n}\n"]}