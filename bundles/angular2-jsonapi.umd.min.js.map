{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular2-jsonapi/models/json-nested.model.ts","ng://angular2-jsonapi/converters/json-model/json-model.converter.ts","ng://angular2-jsonapi/constants/symbols.ts","ng://angular2-jsonapi/converters/date/date.converter.ts","ng://angular2-jsonapi/models/json-api-meta.model.ts","ng://angular2-jsonapi/models/json-api.model.ts","ng://angular2-jsonapi/models/error-response.model.ts","ng://angular2-jsonapi/models/json-api-query-data.ts","ng://angular2-jsonapi/services/json-api-datastore.service.ts","ng://angular2-jsonapi/providers.ts","ng://angular2-jsonapi/module.ts","ng://angular2-jsonapi/decorators/attribute.decorator.ts","ng://angular2-jsonapi/decorators/belongs-to.decorator.ts","ng://angular2-jsonapi/decorators/has-many.decorator.ts","ng://angular2-jsonapi/decorators/json-api-datastore-config.decorator.ts","ng://angular2-jsonapi/decorators/json-api-model-config.decorator.ts","ng://angular2-jsonapi/decorators/json-attribute.decorator.ts","ng://angular2-jsonapi/decorators/nested-attribute.decorator.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","JsonApiNestedModel","data","nestedDataSerialization","defineProperty","Reflect","getMetadata","constructor","fill","serialize","transformSerializedNamesToPropertyNames","_this","serializedNameToPropertyName","getModelPropertyNames","properties","keys","forEach","serializedName","DEFAULT_OPTIONS","nullValue","hasMany","JsonModelConverter","model","options","modelType","mask","result","Array","isArray","Error","value_1","tslib_1.__values","value_1_1","item","temp","push","unmask","value_2","value_2_1","AttributeMetadata","DateConverter","parseISO","toISOString","JsonApiMetaModel","response","links","meta","AttributeMetadataIndex","parseRelationshipLinks","relationships","_.forEach","_a","key","JsonApiModel","internalDatastore","modelInitialization","relationshipLinks","unresolvedRelations","id","attributes","isModelInitialization","syncRelationships","included","remainingModels","lastSyncModels","modelsForProcessing","undefined","concat","parseHasMany","parseBelongsTo","save","params","headers","customUrl","checkChanges","attributesMetadata","saveRecord","hasDirtyAttributes","propertyName","nested","_.isEqual","oldValue","newValue","serialisationValue","converter","_.cloneDeep","rollbackAttributes","hasMany_1","hasMany_1_1","metadata","relationship","allModels","modelTypesFetched","_c","e_2","_d","typeIndex","typeName","type","includes","models","relationshipModels","getHasManyRelationship","console","error","belongsTo","belongsTo_1","belongsTo_1_1","dataRelationship","relationshipModel","getBelongsToRelationship","relationshipList","relationshipData","find","newObject","createOrPeek","indexOfNewlyFoundModel","indexOf","splice","peekRecord","peek","_.extend","deserializeModel","addToStore","ErrorResponse","errors","JsonApiQueryData","jsonApiModels","metaData","getModels","getMeta","JsonApiDatastore","http","globalRequestOptions","internalStore","toQueryString","datastoreConfig","overrides","_toQueryString","globalHeaders","requestOptions","configFromDecorator","config","getDirtyAttributes","dirtyData","query","requestHeaders","buildHttpHeaders","url","buildUrl","get","pipe","map","res","extractQueryData","catchError","handleError","findAll","buildRequestOptions","observe","findRecord","extractRecordData","createRecord","modelConfig","getRelationships","body","patch","post","status","of","updateRelationships","deleteRecord","delete","peekAll","typeStore","modelOrModels","models_1","models_1_1","queryParams","baseUrl","apiVersion","modelEndpointUrl","filter","x","join","belongsToMetadata","hasManyMetadata","relationshipKey","entity","it","this_1","buildSingleRelationshipData","isValidToManyRelation","objects","every","index","self","relationShipData","withMeta","parseMeta","deserializedModel","HttpErrorResponse","throwError","metaModel","getOptions","customHeaders","HttpHeaders","Accept","Content-Type","has","set","resetMetadataAttributes","modelsTypes","propertyHasMany","property","indexOfModel","customOptions","httpHeaders","qs.stringify","arrayFormat","Injectable","HttpClient","PROVIDERS","JsonApiModule","NgModule","args","providers","exports","HttpClientModule","target","dataType","forSerialisation","attrConverter","Date","datatype","marked","defineMetadata","mappingMetadata","saveAnnotations","newVal","targetType","convertedValue","instance","setMetadata","enumerable","configurable","annotations","updateMetadata"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ModelConfig } from '../interfaces/model-config.interface';\nimport { JsonApiModel } from './json-api.model';\n\nexport class JsonApiNestedModel {\n  [key: string]: any;\n\n  public nestedDataSerialization = false;\n\n  constructor(data?: any) {\n    if (data) {\n      Object.assign(this, data);\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  public fill(data: any) {\n    Object.assign(this, data);\n  }\n\n  public serialize(): any {\n    return this.transformSerializedNamesToPropertyNames();\n  }\n\n  protected transformSerializedNamesToPropertyNames<T extends JsonApiModel>() {\n    const serializedNameToPropertyName = this.getModelPropertyNames();\n    const properties: any = {};\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (this && serializedName !== 'nestedDataSerialization') {\n        properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected getModelPropertyNames() {\n    return Reflect.getMetadata('AttributeMapping', this) || [];\n  }\n}\n","import { JsonModelConverterConfig } from '../../interfaces/json-model-converter-config.interface';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\nimport { JsonApiNestedModel } from '../../models/json-nested.model';\n\nexport const DEFAULT_OPTIONS: JsonModelConverterConfig = {\n  nullValue: false,\n  hasMany: false\n};\n\nexport class JsonModelConverter<T> implements PropertyConverter {\n  private modelType: any; // ModelType<T>\n  private options: JsonModelConverterConfig;\n\n  constructor(model: T, options: JsonModelConverterConfig = {}) {\n    this.modelType = model; // <ModelType<T>>model\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  mask(value: any): T | Array<T> {\n    if (!value && !this.options.nullValue) {\n      if (this.options.hasMany) {\n        return [];\n      }\n      return new this.modelType();\n    }\n\n    let result = null;\n    if (this.options.hasMany) {\n      if (!Array.isArray(value)) {\n        throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\n      }\n      result = [];\n      for (const item of value) {\n        if (item === null) {\n          continue;\n        }\n        let temp;\n        if (typeof item === 'object') {\n          temp = new this.modelType();\n          temp.fill(item);\n        } else {\n          temp = item;\n        }\n\n        result.push(temp);\n      }\n    } else {\n      if (!(value instanceof this.modelType)) {\n        result = new this.modelType();\n        result.fill(value);\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n\n  unmask(value: any): any {\n    if (!value) {\n      return value;\n    }\n    let result = null;\n    if (Array.isArray(value)) {\n      result = [];\n      for (const item of value) {\n        if (!item) {\n          continue;\n        }\n        if (item instanceof JsonApiNestedModel) {\n          item.nestedDataSerialization = true;\n          result.push(item.serialize());\n          item.nestedDataSerialization = false;\n        } else {\n          result.push(item);\n        }\n      }\n    } else {\n      if (value instanceof JsonApiNestedModel) {\n        value.nestedDataSerialization = true;\n        result = value.serialize();\n        value.nestedDataSerialization = false;\n      } else {\n        result = value;\n      }\n    }\n    return result;\n  }\n}\n","// tslint:disable-next-line:variable-name\nexport const AttributeMetadata = Symbol('AttributeMetadata') as any;\n","import { parseISO } from 'date-fns';\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\n\nexport class DateConverter implements PropertyConverter {\n  mask(value: any) {\n    if (typeof value === 'string') {\n      return parseISO(value);\n    } else {\n      return value;\n    }\n  }\n\n  unmask(value: any) {\n    return value ? value.toISOString() : value;\n  }\n}\n","export type MetaModelType<T> = new(response: any) => T;\n\nexport class JsonApiMetaModel {\n  public links: Array<any>;\n  public meta: any;\n\n  constructor(response: any) {\n    this.links = response.links || [];\n    this.meta = response.meta;\n  }\n}\n","import find from 'lodash-es/find';\nimport includes from 'lodash-es/includes';\nimport { Observable } from 'rxjs';\nimport { JsonApiDatastore, ModelType } from '../services/json-api-datastore.service';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport * as _ from 'lodash';\nimport { AttributeMetadata } from '../constants/symbols';\nimport { HttpHeaders } from '@angular/common/http';\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\nconst parseRelationshipLinks = relationships => {\n  const result = {};\n  const linksMapper = ({ links }, key) => {\n    if (links) {\n      result[key] = { links };\n    }\n  };\n\n  _.forEach(relationships || {}, linksMapper);\n\n  return result;\n};\n\nexport class JsonApiModel {\n  id: string;\n  public modelInitialization = false;\n  public relationshipLinks = {};\n  public unresolvedRelations: any = {};\n\n  [key: string]: any;\n\n  lastSyncModels: Array<any>;\n\n  constructor(private internalDatastore: JsonApiDatastore, data?: any) {\n    if (data) {\n      this.modelInitialization = true;\n      this.id = data.id;\n      this.relationshipLinks = parseRelationshipLinks(data.relationships);\n      Object.assign(this, data.attributes);\n      this.modelInitialization = false;\n    }\n  }\n\n  public isModelInitialization(): boolean {\n    return this.modelInitialization;\n  }\n\n  public syncRelationships(data: any, included: any, remainingModels?: Array<any>): void {\n    if (this.lastSyncModels === included) {\n      return;\n    }\n\n    if (data) {\n      let modelsForProcessing = remainingModels;\n\n      if (modelsForProcessing === undefined) {\n        modelsForProcessing = [].concat(included);\n      }\n\n      this.parseHasMany(data, included, modelsForProcessing);\n      this.parseBelongsTo(data, included, modelsForProcessing);\n    }\n\n    this.lastSyncModels = included;\n  }\n\n  public save(params?: any, headers?: HttpHeaders, customUrl?: string): Observable<this> {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\n  }\n\n  get hasDirtyAttributes() {\n    this.checkChanges();\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    let hasDirtyAttributes = false;\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.hasDirtyAttributes) {\n          hasDirtyAttributes = true;\n          break;\n        }\n      }\n    }\n    return hasDirtyAttributes;\n  }\n\n  private checkChanges() {\n    const attributesMetadata: any = this[AttributeMetadata];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n        if (metadata.nested) {\n          this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n            attributesMetadata[propertyName].oldValue,\n            attributesMetadata[propertyName].newValue\n          );\n          this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(\n            Reflect.getMetadata('design:type', this, propertyName),\n            _.cloneDeep(attributesMetadata[propertyName].newValue),\n            true\n          );\n        }\n      }\n    }\n  }\n\n  public rollbackAttributes(): void {\n    const attributesMetadata: any = this[AttributeMetadataIndex];\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        if (attributesMetadata[propertyName].hasDirtyAttributes) {\n          this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\n        }\n      }\n    }\n  }\n\n  get modelConfig(): ModelConfig {\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\n  }\n\n  private parseHasMany(data: any, included: any, remainingModels: Array<any>): void {\n    const hasMany: any = Reflect.getMetadata('HasMany', this);\n\n    if (hasMany) {\n      for (const metadata of hasMany) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n\n        if (relationship && relationship.data && Array.isArray(relationship.data)) {\n          let allModels: JsonApiModel[] = [];\n          const modelTypesFetched: any = [];\n\n          for (const typeIndex of Object.keys(relationship.data)) {\n            const typeName: string = relationship.data[typeIndex].type;\n\n            if (!includes(modelTypesFetched, typeName)) {\n              modelTypesFetched.push(typeName);\n              // tslint:disable-next-line:max-line-length\n              const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n              if (modelType) {\n                const relationshipModels: JsonApiModel[] = this.getHasManyRelationship(\n                  modelType,\n                  relationship.data,\n                  included,\n                  typeName,\n                  remainingModels\n                );\n\n                if (relationshipModels.length > 0) {\n                  allModels = allModels.concat(relationshipModels);\n                }\n              } else {\n                console.error(`parseHasMany - Model type for relationship ${typeName} not found.`);\n              }\n            }\n          }\n\n          this[metadata.propertyName] = allModels;\n        }\n      }\n    }\n  }\n\n  private parseBelongsTo(data: any, included: Array<any>, remainingModels: Array<any>): void {\n    const belongsTo: any = Reflect.getMetadata('BelongsTo', this);\n\n    if (belongsTo) {\n      for (const metadata of belongsTo) {\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\n        if (relationship && relationship.data) {\n          const dataRelationship: any = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\n          if (dataRelationship) {\n            const typeName: string = dataRelationship.type;\n            // tslint:disable-next-line:max-line-length\n            const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n\n            if (modelType) {\n              const relationshipModel = this.getBelongsToRelationship(\n                modelType,\n                dataRelationship,\n                included,\n                typeName,\n                remainingModels\n              );\n\n              if (relationshipModel) {\n                this[metadata.propertyName] = relationshipModel;\n              } else {\n                this.unresolvedRelations[metadata.propertyName] = dataRelationship;\n              }\n            } else {\n              console.error(`parseBelongsTo - Model type for relationship ${typeName} not found.`);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private getHasManyRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: any,\n    typeName: string,\n    remainingModels: Array<any>\n  ): Array<T> {\n    const relationshipList: Array<T> = [];\n\n    data.forEach((item: any) => {\n      const relationshipData: any = find(included, {id: item.id, type: typeName} as any);\n\n      if (relationshipData) {\n        const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n        const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n        const modelsForProcessing = remainingModels.concat([]);\n\n        if (indexOfNewlyFoundModel !== -1) {\n          modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n          newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n        }\n\n        relationshipList.push(newObject);\n      } else {\n        const type = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\n        const newObject: T = this.internalDatastore.peekRecord(type, item.id);\n        if (newObject) {\n          relationshipList.push(newObject);\n        }\n      }\n    });\n\n    return relationshipList;\n  }\n\n  private getBelongsToRelationship<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    data: any,\n    included: Array<any>,\n    typeName: string,\n    remainingModels: Array<any>\n  ): T | null {\n    const id: string = data.id;\n\n    const relationshipData: any = find(included, {id, type: typeName} as any);\n\n    if (relationshipData) {\n      const newObject: T = this.createOrPeek(modelType, relationshipData);\n\n      const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\n      const modelsForProcessing = remainingModels.concat([]);\n\n      if (indexOfNewlyFoundModel !== -1) {\n        modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\n        newObject.syncRelationships(relationshipData, included, modelsForProcessing);\n      }\n\n      return newObject;\n    }\n\n    return this.internalDatastore.peekRecord(modelType, id);\n  }\n\n  private createOrPeek<T extends JsonApiModel>(modelType: ModelType<T>, data: any): T {\n    const peek = this.internalDatastore.peekRecord(modelType, data.id);\n\n    if (peek) {\n      _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\n      return peek;\n    }\n\n    const newObject: T = this.internalDatastore.deserializeModel(modelType, data);\n    this.internalDatastore.addToStore(newObject);\n\n    return newObject;\n  }\n}\n","export interface JsonApiError {\n  id?: string;\n  links?: Array<any>;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: {\n    pointer?: string;\n    parameter?: string\n  };\n  meta?: any;\n}\n\nexport class ErrorResponse {\n  errors?: JsonApiError[] = [];\n\n  constructor(errors ?: JsonApiError[]) {\n    if (errors) {\n      this.errors = errors;\n    }\n  }\n}\n","export class JsonApiQueryData<T> {\n  constructor(protected jsonApiModels: Array<T>, protected metaData?: any) {\n  }\n\n  public getModels(): T[] {\n    return this.jsonApiModels;\n  }\n\n  public getMeta(): any {\n    return this.metaData;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport find from 'lodash-es/find';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, of, throwError } from 'rxjs';\nimport { JsonApiModel } from '../models/json-api.model';\nimport { ErrorResponse } from '../models/error-response.model';\nimport { JsonApiQueryData } from '../models/json-api-query-data';\nimport * as qs from 'qs';\nimport { DatastoreConfig } from '../interfaces/datastore-config.interface';\nimport { ModelConfig } from '../interfaces/model-config.interface';\nimport { AttributeMetadata } from '../constants/symbols';\nimport 'reflect-metadata';\n\nexport type ModelType<T extends JsonApiModel> = new(datastore: JsonApiDatastore, data: any) => T;\n\n/**\n * HACK/FIXME:\n * Type 'symbol' cannot be used as an index type.\n * TypeScript 2.9.x\n * See https://github.com/Microsoft/TypeScript/issues/24587.\n */\n// tslint:disable-next-line:variable-name\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\n\n@Injectable()\nexport class JsonApiDatastore {\n\n  protected config: DatastoreConfig;\n  private globalHeaders: HttpHeaders;\n  private globalRequestOptions: object = {};\n  private internalStore: { [type: string]: { [id: string]: JsonApiModel } } = {};\n  private toQueryString: (params: any) => string = this.datastoreConfig.overrides\n  && this.datastoreConfig.overrides.toQueryString ?\n    this.datastoreConfig.overrides.toQueryString : this._toQueryString;\n\n  constructor(protected http: HttpClient) {\n  }\n\n  set headers(headers: HttpHeaders) {\n    this.globalHeaders = headers;\n  }\n\n  set requestOptions(requestOptions: object) {\n    this.globalRequestOptions = requestOptions;\n  }\n\n  public get datastoreConfig(): DatastoreConfig {\n    const configFromDecorator: DatastoreConfig = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\n    return Object.assign(configFromDecorator, this.config);\n  }\n\n  private get getDirtyAttributes() {\n    if (this.datastoreConfig.overrides\n      && this.datastoreConfig.overrides.getDirtyAttributes) {\n      return this.datastoreConfig.overrides.getDirtyAttributes;\n    }\n    return JsonApiDatastore.getDirtyAttributes;\n  }\n\n  private static getDirtyAttributes(attributesMetadata: any): { string: any } {\n    const dirtyData: any = {};\n\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\n          dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\n        }\n      }\n    }\n    return dirtyData;\n  }\n\n  /**\n   * @deprecated use findAll method to take all models\n   */\n  query<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T[]> {\n    const requestHeaders: HttpHeaders = this.buildHttpHeaders(headers);\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    return this.http.get(url, {headers: requestHeaders})\n      .pipe(\n        map((res: any) => this.extractQueryData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findAll<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<JsonApiQueryData<T>> {\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractQueryData(res, modelType, true)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public findRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n    const url: string = this.buildUrl(modelType, params, id, customUrl);\n\n    return this.http.get(url, requestOptions)\n      .pipe(\n        map((res: HttpResponse<object>) => this.extractRecordData(res, modelType)),\n        catchError((res: any) => this.handleError(res))\n      );\n  }\n\n  public createRecord<T extends JsonApiModel>(modelType: ModelType<T>, data?: any): T {\n    return new modelType(this, {attributes: data});\n  }\n\n  public saveRecord<T extends JsonApiModel>(\n    attributesMetadata: any,\n    model: T,\n    params?: any,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<T> {\n    const modelType = model.constructor as ModelType<T>;\n    const modelConfig: ModelConfig = model.modelConfig;\n    const typeName: string = modelConfig.type;\n    const relationships: any = this.getRelationships(model);\n    const url: string = this.buildUrl(modelType, params, model.id, customUrl);\n\n    let httpCall: Observable<HttpResponse<object>>;\n    const body: any = {\n      data: {\n        relationships,\n        type: typeName,\n        id: model.id,\n        attributes: this.getDirtyAttributes(attributesMetadata, model)\n      }\n    };\n\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\n\n    if (model.id) {\n      httpCall = this.http.patch<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    } else {\n      httpCall = this.http.post<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\n    }\n\n    return httpCall\n      .pipe(\n        map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model),\n        catchError((res) => {\n          if (res == null) {\n            return of(model);\n          }\n          return this.handleError(res);\n        }),\n        map((res) => this.updateRelationships(res, relationships))\n      );\n  }\n\n  public deleteRecord<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    id: string,\n    headers?: HttpHeaders,\n    customUrl?: string\n  ): Observable<Response> {\n    const requestOptions: object = this.buildRequestOptions({headers});\n    const url: string = this.buildUrl(modelType, null, id, customUrl);\n\n    return this.http.delete(url, requestOptions)\n      .pipe(\n        catchError((res: HttpErrorResponse) => this.handleError(res))\n      );\n  }\n\n  public peekRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string): T | null {\n    const type: string = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    return this.internalStore[type] ? this.internalStore[type][id] as T : null;\n  }\n\n  public peekAll<T extends JsonApiModel>(modelType: ModelType<T>): Array<T> {\n    const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\n    const typeStore = this.internalStore[type];\n    return typeStore ? Object.keys(typeStore).map((key) => typeStore[key] as T) : [];\n  }\n\n  public deserializeModel<T extends JsonApiModel>(modelType: ModelType<T>, data: any) {\n    data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\n    return new modelType(this, data);\n  }\n\n  public addToStore(modelOrModels: JsonApiModel | JsonApiModel[]): void {\n    const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\n    const type: string = models[0].modelConfig.type;\n    let typeStore = this.internalStore[type];\n\n    if (!typeStore) {\n      typeStore = this.internalStore[type] = {};\n    }\n\n    for (const model of models) {\n      typeStore[model.id] = model;\n    }\n  }\n\n  public transformSerializedNamesToPropertyNames<T extends JsonApiModel>(modelType: ModelType<T>, attributes: any) {\n    const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\n    const properties: any = {};\n\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\n      if (attributes) {\n        properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\n      }\n    });\n\n    return properties;\n  }\n\n  protected buildUrl<T extends JsonApiModel>(\n    modelType: ModelType<T>,\n    params?: any,\n    id?: string,\n    customUrl?: string\n  ): string {\n    // TODO: use HttpParams instead of appending a string to the url\n    const queryParams: string = this.toQueryString(params);\n\n    if (customUrl) {\n      return queryParams ? `${customUrl}?${queryParams}` : customUrl;\n    }\n\n    const modelConfig: ModelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\n\n    const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\n    const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\n    const modelEndpointUrl: string = modelConfig.modelEndpointUrl || modelConfig.type;\n\n    const url: string = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\n\n    return queryParams ? `${url}?${queryParams}` : url;\n  }\n\n  protected getRelationships(data: any): any {\n    let relationships: any;\n\n    const belongsToMetadata: any[] = Reflect.getMetadata('BelongsTo', data) || [];\n    const hasManyMetadata: any[] = Reflect.getMetadata('HasMany', data) || [];\n\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        if (data[key] instanceof JsonApiModel) {\n          relationships = relationships || {};\n\n          if (data[key].id) {\n            const entity = belongsToMetadata.find((it: any) => it.propertyName === key);\n            const relationshipKey = entity.relationship;\n            relationships[relationshipKey] = {\n              data: this.buildSingleRelationshipData(data[key])\n            };\n          }\n        } else if (data[key] instanceof Array) {\n          const entity = hasManyMetadata.find((it: any) => it.propertyName === key);\n          if (entity && this.isValidToManyRelation(data[key])) {\n            relationships = relationships || {};\n\n            const relationshipKey = entity.relationship;\n            const relationshipData = data[key]\n              .filter((model: JsonApiModel) => model.id)\n              .map((model: JsonApiModel) => this.buildSingleRelationshipData(model));\n\n            relationships[relationshipKey] = {\n              data: relationshipData\n            };\n          }\n        }\n      }\n    }\n\n    return relationships;\n  }\n\n  protected isValidToManyRelation(objects: Array<any>): boolean {\n    if (!objects.length) {\n      return true;\n    }\n    const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\n    if (!isJsonApiModel) {\n      return false;\n    }\n    const types = objects.map((item: JsonApiModel) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\n    return types\n      .filter((type: string, index: number, self: string[]) => self.indexOf(type) === index)\n      .length === 1;\n  }\n\n  protected buildSingleRelationshipData(model: JsonApiModel): any {\n    const relationshipType: string = model.modelConfig.type;\n    const relationShipData: { type: string, id?: string, attributes?: any } = {type: relationshipType};\n\n    if (model.id) {\n      relationShipData.id = model.id;\n    } else {\n      const attributesMetadata: any = Reflect.getMetadata('Attribute', model);\n      relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\n    }\n\n    return relationShipData;\n  }\n\n  protected extractQueryData<T extends JsonApiModel>(\n    response: HttpResponse<object>,\n    modelType: ModelType<T>,\n    withMeta = false\n  ): Array<T> | JsonApiQueryData<T> {\n    const body: any = response.body;\n    const models: T[] = [];\n\n    body.data.forEach((data: any) => {\n      let type = this.datastoreConfig.models[data.type];\n      type = type ? type : modelType;\n      const model: T = this.deserializeModel(type, data);\n      this.addToStore(model);\n\n      if (body.included) {\n        model.syncRelationships(data, body.included.concat(data));\n        this.addToStore(model);\n      }\n\n      models.push(model);\n    });\n\n    if (withMeta && withMeta === true) {\n      return new JsonApiQueryData(models, this.parseMeta(body, modelType));\n    }\n\n    return models;\n  }\n\n  protected extractRecordData<T extends JsonApiModel>(\n    res: HttpResponse<object>,\n    modelType: ModelType<T>,\n    model?: T\n  ): T {\n    const body: any = res.body;\n    // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\n    // null is converted to 'null', so this is temporary needed to make testcase possible\n    // (and to avoid a decrease of the coverage)\n    if (!body || body === 'null') {\n      throw new Error('no body in response');\n    }\n\n    if (!body.data) {\n      if (res.status === 201 || !model) {\n        throw new Error('expected data in response');\n      }\n      return model;\n    }\n\n    if (model) {\n      model.modelInitialization = true;\n      model.id = body.data.id;\n      Object.assign(model, body.data.attributes);\n      model.modelInitialization = false;\n    }\n\n    const deserializedModel = model || this.deserializeModel(modelType, body.data);\n    this.addToStore(deserializedModel);\n    if (body.included) {\n      deserializedModel.syncRelationships(body.data, body.included);\n      this.addToStore(deserializedModel);\n    }\n\n    return deserializedModel;\n  }\n\n  protected handleError(error: any): Observable<any> {\n    if (\n      error instanceof HttpErrorResponse &&\n      error.error instanceof Object &&\n      error.error.errors &&\n      error.error.errors instanceof Array\n    ) {\n      const errors: ErrorResponse = new ErrorResponse(error.error.errors);\n      return throwError(errors);\n    }\n\n    return throwError(error);\n  }\n\n  protected parseMeta(body: any, modelType: ModelType<JsonApiModel>): any {\n    const metaModel: any = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\n    return new metaModel(body);\n  }\n\n  /**\n   * @deprecated use buildHttpHeaders method to build request headers\n   */\n  protected getOptions(customHeaders?: HttpHeaders): any {\n    return {\n      headers: this.buildHttpHeaders(customHeaders),\n    };\n  }\n\n  protected buildHttpHeaders(customHeaders?: HttpHeaders): HttpHeaders {\n    let requestHeaders: HttpHeaders = new HttpHeaders({\n      Accept: 'application/vnd.api+json',\n      'Content-Type': 'application/vnd.api+json'\n    });\n\n    if (this.globalHeaders) {\n      this.globalHeaders.keys().forEach((key) => {\n        if (this.globalHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\n        }\n      });\n    }\n\n    if (customHeaders) {\n      customHeaders.keys().forEach((key) => {\n        if (customHeaders.has(key)) {\n          requestHeaders = requestHeaders.set(key, customHeaders.get(key));\n        }\n      });\n    }\n\n    return requestHeaders;\n  }\n\n  protected resetMetadataAttributes<T extends JsonApiModel>(res: T, attributesMetadata: any, modelType: ModelType<T>) {\n    for (const propertyName in attributesMetadata) {\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\n        const metadata: any = attributesMetadata[propertyName];\n\n        if (metadata.hasDirtyAttributes) {\n          metadata.hasDirtyAttributes = false;\n        }\n      }\n    }\n\n    // @ts-ignore\n    res[AttributeMetadataIndex] = attributesMetadata;\n    return res;\n  }\n\n  protected updateRelationships<T extends JsonApiModel>(model: T, relationships: any): T {\n    const modelsTypes: any = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\n\n    for (const relationship in relationships) {\n      if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship)) {\n        const relationshipModel: JsonApiModel = model[relationship];\n        const hasMany: any[] = Reflect.getMetadata('HasMany', relationshipModel);\n        const propertyHasMany: any = find(hasMany, (property) => {\n          return modelsTypes[property.relationship] === model.constructor;\n        });\n\n        if (propertyHasMany) {\n          relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\n\n          const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\n\n          if (indexOfModel === -1) {\n            relationshipModel[propertyHasMany.propertyName].push(model);\n          } else {\n            relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\n          }\n        }\n      }\n    }\n\n    return model;\n  }\n\n  protected getModelPropertyNames(model: JsonApiModel) {\n    return Reflect.getMetadata('AttributeMapping', model) || [];\n  }\n\n  private buildRequestOptions(customOptions: any = {}): object {\n    const httpHeaders: HttpHeaders = this.buildHttpHeaders(customOptions.headers);\n\n    const requestOptions: object = Object.assign(customOptions, {\n      headers: httpHeaders\n    });\n\n    return Object.assign(this.globalRequestOptions, requestOptions);\n  }\n\n  private _toQueryString(params: any): string {\n    return qs.stringify(params, {arrayFormat: 'brackets'});\n  }\n}\n","import { JsonApiDatastore } from './services/json-api-datastore.service';\n\nexport * from './services/json-api-datastore.service';\n\nexport const PROVIDERS: any[] = [\n  JsonApiDatastore\n];\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PROVIDERS } from './providers';\n\n@NgModule({\n  providers: [PROVIDERS],\n  exports: [HttpClientModule]\n})\nexport class JsonApiModule {\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\nimport * as _ from 'lodash';\n\nexport function Attribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('Attribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('Attribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const setMetadata = (\n      instance: any,\n      oldValue: any,\n      newValue: any\n    ) => {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      instance[AttributeMetadata][propertyName] = {\n        newValue,\n        oldValue,\n        nested: false,\n        serializedName: options.serializedName,\n        hasDirtyAttributes: !_.isEqual(oldValue, newValue),\n        serialisationValue: converter(targetType, newValue, true)\n      };\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      const convertedValue = converter(targetType, newVal);\n      let oldValue = null;\n      if (this.isModelInitialization() && this.id) {\n        oldValue = converter(targetType, newVal);\n      } else {\n        if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\n          oldValue = this[AttributeMetadata][propertyName].oldValue;\n        }\n      }\n\n      this[`_${propertyName}`] = convertedValue;\n      setMetadata(this, oldValue, convertedValue);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","export function BelongsTo(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('BelongsTo', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('BelongsTo', annotations, target);\n  };\n}\n","export function HasMany(config: any = {}) {\n  return (target: any, propertyName: string | symbol) => {\n    const annotations = Reflect.getMetadata('HasMany', target) || [];\n\n    annotations.push({\n      propertyName,\n      relationship: config.key || propertyName\n    });\n\n    Reflect.defineMetadata('HasMany', annotations, target);\n  };\n}\n","export function JsonApiDatastoreConfig(config: any = {}) {\n  return (target: any) => {\n    Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\n  };\n}\n","import { JsonApiMetaModel } from '../models/json-api-meta.model';\nimport { ModelConfig } from '../interfaces/model-config.interface';\n\nexport function JsonApiModelConfig(config: ModelConfig) {\n  return (target: any) => {\n    if (typeof config.meta === 'undefined' || config.meta == null) {\n      config.meta = JsonApiMetaModel;\n    }\n\n    Reflect.defineMetadata('JsonApiModelConfig', config, target);\n  };\n}\n","import { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport { DateConverter } from '../converters/date/date.converter';\n\nexport function JsonAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else if (dataType === Date) {\n        attrConverter = new DateConverter();\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('JsonAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const getter = function() {\n      if (this.nestedDataSerialization) {\n        return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\n      }\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n","import { AttributeMetadata } from '../constants/symbols';\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\nimport * as _ from 'lodash';\n\nexport function NestedAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\n  return (target: any, propertyName: string) => {\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\n      let attrConverter;\n\n      if (options.converter) {\n        attrConverter = options.converter;\n      } else {\n        const datatype = new dataType();\n\n        if (datatype.mask && datatype.unmask) {\n          attrConverter = datatype;\n        }\n      }\n\n      if (attrConverter) {\n        if (!forSerialisation) {\n          return attrConverter.mask(value);\n        }\n        return attrConverter.unmask(value);\n      }\n\n      return value;\n    };\n\n    const saveAnnotations = () => {\n      const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\n\n      metadata[propertyName] = {\n        marked: true\n      };\n\n      Reflect.defineMetadata('NestedAttribute', metadata, target);\n\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\n      mappingMetadata[serializedPropertyName] = propertyName;\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\n    };\n\n    const updateMetadata = (instance: any) => {\n      const newValue = instance[`_${propertyName}`];\n\n      if (!instance[AttributeMetadata]) {\n        instance[AttributeMetadata] = {};\n      }\n      if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\n        instance[AttributeMetadata][propertyName].newValue = newValue;\n        instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\n          instance[AttributeMetadata][propertyName].oldValue,\n          newValue\n        );\n        instance[AttributeMetadata][propertyName].serialisationValue = newValue;\n      } else {\n        const oldValue = _.cloneDeep(newValue);\n        instance[AttributeMetadata][propertyName] = {\n          newValue,\n          oldValue,\n          converter,\n          nested: true,\n          hasDirtyAttributes: !_.isEqual(newValue, oldValue)\n        };\n      }\n    };\n\n    const getter = function() {\n      return this[`_${propertyName}`];\n    };\n\n    const setter = function(newVal: any) {\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\n      this[`_${propertyName}`] = converter(targetType, newVal);\n      updateMetadata(this);\n    };\n\n    if (delete target[propertyName]) {\n      saveAnnotations();\n      Object.defineProperty(target, propertyName, {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true\n      });\n\n    }\n  };\n}\n"]}